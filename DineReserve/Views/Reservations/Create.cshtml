@model DineReserve.Models.Reservation

@{
    ViewData["Title"] = "Make a Reservation";
    var blockedTimes = ViewBag.BlockedTimes as List<string> ?? new List<string>();
    var availableTimes = new[] { "17:00", "17:30", "18:00", "18:30", "19:00", "19:30" };
}

<div class="container mt-5">
    <h2 class="mb-4">Make a Reservation</h2>
    <div class="row">
        <!-- Left: Date and Time Selection -->
        <div class="col-md-6 mb-4">
            <div class="card p-4">
                <h5>Select Date</h5>
                <input type="date" class="form-control mb-3" id="reservation-date"
                       value="@DateTime.Now.ToString("yyyy-MM-dd")" />

                <h5>Select Time</h5>
                <div class="d-flex flex-wrap gap-2" id="time-buttons">
                    @foreach (var time in availableTimes)
                    {
                        var isBlocked = blockedTimes.Contains(time);
                        <button type="button"
                                class="btn @(isBlocked ? "btn-secondary disabled" : "btn-outline-secondary") time-btn"
                                data-time="@time"
                        @(isBlocked ? "disabled" : "")>
                            @time
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Right: Guest Info Form -->
        <div class="col-md-6">
            <div class="card p-4">
                <form asp-action="Create" method="post">
                    <div class="mb-3">
                        <label asp-for="FirstName" class="form-label">First Name</label>
                        <input asp-for="FirstName" class="form-control" placeholder="Enter your first name" />
                        <span asp-validation-for="FirstName" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="LastName" class="form-label">Last Name</label>
                        <input asp-for="LastName" class="form-control" placeholder="Enter your last name" />
                        <span asp-validation-for="LastName" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="PhoneNumber" class="form-label">Phone Number</label>
                        <input asp-for="PhoneNumber" class="form-control" placeholder="Enter phone number" />
                        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Email" class="form-label">Email</label>
                        <input asp-for="Email" class="form-control" placeholder="Enter email" />
                        <span asp-validation-for="Email" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="NumberOfGuests" class="form-label">Number of Guests</label>
                        <select asp-for="NumberOfGuests" class="form-select">
                            @for (int i = 1; i <= 10; i++)
                            {
                                <option value="@i">@i Guest@(i > 1 ? "s" : "")</option>
                            }
                        </select>
                    </div>

                    <!-- Hidden field for selected datetime -->
                    <input type="hidden" name="ReservationTime" id="reservation-time-hidden" />

                    <button type="submit" class="btn btn-dark w-100">Reserve Table</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Reservation Policies -->
    <div class="mt-5 p-4 bg-light rounded">
        <h5>Reservation Policies</h5>
        <div class="row">
            <div class="col-md-4">
                <strong>Cancellation Policy</strong><br />
                Cancellations must be made at least 24 hours in advance.
            </div>
            <div class="col-md-4">
                <strong>Special Requests</strong><br />
                Let us know dietary restrictions or special events in the notes.
            </div>
            <div class="col-md-4">
                <strong>Large Groups</strong><br />
                For 6 or more guests, please contact us directly.
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const dateInput = document.getElementById("reservation-date");
        const timeButtons = document.querySelectorAll(".time-btn");
        const hiddenInput = document.getElementById("reservation-time-hidden");

        function fetchBlockedTimes(date) {
            fetch(`/Reservations/GetBlockedTimes?date=${date}`)
                .then(res => res.json())
                .then(blockedTimes => {
                    timeButtons.forEach(btn => {
                        const time = btn.getAttribute("data-time");
                        const isBlocked = blockedTimes.includes(time);

                        btn.disabled = isBlocked;
                        btn.classList.remove("btn-dark", "btn-outline-secondary", "btn-secondary", "disabled");

                        if (isBlocked) {
                            btn.classList.add("btn-secondary", "disabled");
                        } else {
                            btn.classList.add("btn-outline-secondary");
                        }
                    });
                });
        }

        dateInput.addEventListener("change", () => {
            fetchBlockedTimes(dateInput.value);
            hiddenInput.value = ""; // clear previous selection
        });

        timeButtons.forEach(btn => {
            btn.addEventListener("click", () => {
                if (btn.disabled) return;

                timeButtons.forEach(b => {
                    b.classList.remove("btn-dark");
                    b.classList.add("btn-outline-secondary");
                });

                btn.classList.remove("btn-outline-secondary");
                btn.classList.add("btn-dark");

                hiddenInput.value = `${dateInput.value}T${btn.getAttribute("data-time")}`;
            });
        });

        // Load blocked times initially
        fetchBlockedTimes(dateInput.value);
    </script>

    @await Html.PartialAsync("_ValidationScriptsPartial")
}
